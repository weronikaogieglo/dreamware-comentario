#=======================================================================================================================
# Dockerfile to build both Comentario frontend and backend at once.
#
# Build with:
#     docker build -f Dockerfile.build-all -t my-comentario .
#
# By default, backend in the container will listen on port 80; you'll also need to copy or mount the secrets file and
# provide a database connection.
#
# The below example assumes you have a local PostgreSQL instance started with 'docker-compose up', a local secrets file,
# and the backend will listen on port 8080 (instead of the default 80):
#     docker run -v $PWD/resources/k8s/secrets.postgres.yaml:/comentario/secrets.yaml:ro --network=host --rm my-comentario \
#         --host=0.0.0.0 \
#         --port=8080 \
#         -vv
#=======================================================================================================================

ARG GO_VERSION=1.24
ARG GOSWAGGER_VERSION=0.31.0
ARG NODE_VERSION=22
ARG OPENJDK_VERSION=21

# Backend build (server)
FROM golang:${GO_VERSION}-alpine AS backend-build
ARG GOSWAGGER_VERSION
RUN apk add --no-cache --update git curl

COPY . /go/src/comentario/
WORKDIR /go/src/comentario/

RUN \
    # Install go-swagger \
    echo 'Installing go-swagger' && \
    curl -fsSL -o /usr/local/bin/swagger \
        "https://github.com/go-swagger/go-swagger/releases/download/v${GOSWAGGER_VERSION}/swagger_linux_amd64" && \
    chmod +x /usr/local/bin/swagger && \
    \
    # Remove any build leftovers copied over
    rm -rf build && \
    # Generate the server code
    go generate && \
    # Clean up modules
    go mod tidy && \
    # Build a binary
    v=$(git describe --tags | sed 's/^v//') && \
    d=$(date -I'seconds') && \
    CGO_ENABLED=0 go build -a -v -o 'comentario' -ldflags "-w -s -X main.version=$v -X main.date=$d"

# Frontend and embed build
FROM node:${NODE_VERSION}-alpine AS frontend-build
ARG OPENJDK_VERSION
RUN apk add --no-cache --update openjdk${OPENJDK_VERSION}-jre-headless

COPY . /comentario
WORKDIR /comentario
RUN rm -rf build && \
    # Install dependencies
    yarn install --frozen-lockfile && \
    # Build frontend
    cd /comentario/frontend && yarn run generate && yarn run build:prod && \
    # Build embed
    cd /comentario/embed && yarn run build:prod

# Final image
FROM alpine:3
RUN apk add --no-cache --update ca-certificates

COPY --from=backend-build /go/src/comentario/comentario /comentario/
COPY --from=frontend-build /comentario/build/frontend/ /comentario/frontend/
COPY ./db/ /comentario/db/
COPY ./templates/ /comentario/templates/

WORKDIR /comentario/
ENTRYPOINT ["/comentario/comentario"]
CMD ["--host=0.0.0.0", "--port=80", "-v"]
